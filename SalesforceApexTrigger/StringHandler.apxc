public class StringHandler {
    
	// a collection of noise words such as articles, pronouns
    static Set<String> stopWords; 
    
    /**
     * Create a list of stopWords
     * @param filename text file that contains stop words
     * @return the list of stopwords
     */
    public static List<String> createStopWordsList(String filename) {
        String tempString;
        List<Document> d = [Select body, bodyLength, ContentType, Url from Document where Name = :filename];
        if(d.size()>0) {
       		Blob b = d[0].body;
         	tempString  = b.toString();
       	}
        return tempString.split('\\s+');
    }
    
    /**
     * Replace non-alphanumeric, a special character -, and two or more white spaces with a single white space
     * and keep each word in the list
     * @param s String
     * @return the list of parsed words
     */
    public static List<String> stringParser(String s) {
        if (s == null) return null;
        return s.replaceAll('[^a-z^A-Z^0-9^\\-]', ' ').replaceAll(' +', ' ').split(' ');
    }
    
    /**
     * Remove stopwords from a list 
     * @param parsedList list that contains string
     * @return the set of words with no stopwords
     */
    public static Set<String> removeStopWords(List<String> parsedList) {
        Set<String> keyWords = new Set<String>();
        for (String word: parsedList) {
            // include only either alphabetic nonnoise word or combination of alphabets and numbers (i.e. model number)
            if (!word.isNumeric() && !stopWords.contains(word.toLowerCase()))   { 
        		keyWords.add(word.toLowerCase());
            } 
    	}
        return keyWords;
    }
    
    /**
     *  Pick up only keywords from description/subject of a given case
     *  @param s string-typed description or subject 
     *  @return a set of keywords
     */
    public static Set<String> parseAndRemove(String s) {
        // Create a list of stopwords if it doesn't exist
        if(stopWords == null) {
            stopWords = new Set<String>();
            String documentName = 'stopWordsNew';
            stopWords.addAll(createStopWordsList(documentName));
        }
        
        Set<String> keyWords = removeStopWords(stringParser(s));
        return keyWords;
    }
    
}